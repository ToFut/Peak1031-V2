-- Fix the safe query execution function to handle audit_logs properly
-- This fixes the entity_type constraint issue

-- Drop the old function
DROP FUNCTION IF EXISTS execute_safe_query(text);

-- Create the fixed function
CREATE OR REPLACE FUNCTION execute_safe_query(query_text text)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    result json;
    query_upper text;
BEGIN
    -- Convert to uppercase for checking
    query_upper := UPPER(query_text);
    
    -- Security checks: Only allow SELECT queries
    IF NOT (query_upper LIKE 'SELECT%') THEN
        RAISE EXCEPTION 'Only SELECT queries are allowed';
    END IF;
    
    -- Check for dangerous patterns
    IF query_upper ~ '(DROP|DELETE|UPDATE|INSERT|ALTER|CREATE|TRUNCATE|EXEC|EXECUTE)' THEN
        RAISE EXCEPTION 'Query contains forbidden operations';
    END IF;
    
    -- Check for SQL injection patterns
    IF query_text ~ '(--|/\*|\*/|xp_|sp_)' THEN
        RAISE EXCEPTION 'Query contains potential SQL injection patterns';
    END IF;
    
    -- Log the query for auditing (fixed with proper entity_type)
    BEGIN
        INSERT INTO audit_logs (
            entity_type,
            action,
            details,
            created_at
        )
        VALUES (
            'system',  -- Add entity_type
            'SAFE_QUERY_EXECUTION',
            jsonb_build_object('query', LEFT(query_text, 1000)), -- Limit query length
            NOW()
        );
    EXCEPTION WHEN OTHERS THEN
        -- If audit logging fails, continue anyway
        NULL;
    END;
    
    -- Execute the query and return results as JSON
    EXECUTE 'SELECT json_agg(row_to_json(t)) FROM (' || query_text || ') t' INTO result;
    
    -- Return empty array if no results
    IF result IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    RETURN result;
    
EXCEPTION
    WHEN OTHERS THEN
        -- Log the error (with proper entity_type)
        BEGIN
            INSERT INTO audit_logs (
                entity_type,
                action,
                details,
                created_at
            )
            VALUES (
                'system',  -- Add entity_type
                'SAFE_QUERY_ERROR',
                jsonb_build_object(
                    'query', LEFT(query_text, 1000),
                    'error', SQLERRM
                ),
                NOW()
            );
        EXCEPTION WHEN OTHERS THEN
            -- If audit logging fails, continue anyway
            NULL;
        END;
        
        -- Re-raise the error
        RAISE;
END;
$$;

-- Grant execute permission to authenticated users only
GRANT EXECUTE ON FUNCTION execute_safe_query(text) TO authenticated;

-- Add comment
COMMENT ON FUNCTION execute_safe_query(text) IS 'Safely executes SELECT queries generated by the OSS LLM natural language processing service (v2 - fixed audit logging)';